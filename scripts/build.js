const fs = require('fs');
const path = require('path');

// Fun√ß√£o para copiar arquivo
function copyFile(source, destination) {
  try {
    fs.copyFileSync(source, destination);
    console.log(`‚úÖ Copiado: ${source} -> ${destination}`);
  } catch (error) {
    console.error(`‚ùå Erro ao copiar ${source}:`, error.message);
  }
}

// Fun√ß√£o para criar diret√≥rio se n√£o existir
function ensureDir(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

// Diret√≥rio de destino
const distDir = path.join(__dirname, '../dist');

// Garantir que o diret√≥rio dist existe
ensureDir(distDir);

// Lista de arquivos para copiar
const filesToCopy = [
  { source: 'public/_redirects', dest: 'dist/_redirects' },
  { source: 'public/.htaccess', dest: 'dist/.htaccess' },
  { source: 'nginx.conf', dest: 'dist/nginx.conf' },
  { source: 'vercel.json', dest: 'dist/vercel.json' }
];

console.log('üöÄ Copiando arquivos de configura√ß√£o para dist/...');

// Copiar arquivos
filesToCopy.forEach(({ source, dest }) => {
  if (fs.existsSync(source)) {
    copyFile(source, dest);
  } else {
    console.warn(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${source}`);
  }
});

console.log('‚úÖ Build finalizado com configura√ß√µes de roteamento!');
console.log('\nüìã Instru√ß√µes de deploy:');
console.log('‚Ä¢ Para Netlify: O arquivo _redirects j√° est√° configurado');
console.log('‚Ä¢ Para Apache: Use o arquivo .htaccess');
console.log('‚Ä¢ Para Nginx: Use o arquivo nginx.conf como refer√™ncia');
console.log('‚Ä¢ Para Vercel: O arquivo vercel.json j√° est√° configurado'); 